// Generated by CoffeeScript 1.6.2
(function() {
  var $, CTA_buttons, Canvas, SwoopAnalyticsData, between, breakCounter, context, drawLines, hideElements, imageCycle, images, init, line1, line2, lines, log, nextBreakpoint, positionLoader, previousBreakpoint, total_images, updateBackwardSwipe, updateCanvas, updateElements, updateForwardSwipe, updateIndicators;

  $ = jQuery;

  log = function(message) {
    if (typeof console === 'object') {
      return console.log(message);
    } else {
      return null;
    }
  };

  $(document).ready(function() {
    var gaEnabled;

    gaEnabled = typeof _gaq === 'object' ? true : false;
    window.SwoopGAData = new SwoopAnalyticsData(gaEnabled);
  });

  $(window).load(function() {
    init(lines);
    drawLines(lines);
    positionLoader();
    CTA_buttons();
    $('.next').click(function() {
      return nextBreakpoint(lines);
    });
    $('.prev').click(function() {
      return previousBreakpoint(lines);
    });
  });

  Canvas = null;

  context = null;

  total_images = null;

  images = [];

  breakCounter = -1;

  lines = [
    line1 = {
      frame: 14,
      path: "M100,120L100,250L150,250"
    }, line2 = {
      frame: 27,
      path: "M250,450L200,400L200,350"
    }
  ];

  window.slideFrame = new Object();

  slideFrame.previous = 0;

  slideFrame.current = 0;

  slideFrame.swipe_previous = 0;

  slideFrame.swipe_current = 0;

  init = function(lineArray) {
    var draw, i, imageSources, imagesLoaded, src, _i, _len, _loaded;

    Canvas = document.getElementById('myCanvas');
    context = Canvas.getContext('2d');
    imageSources = ['images/im01.png', 'images/im02.png', 'images/im03.png', 'images/im04.png', 'images/im05.png', 'images/im06.png', 'images/im07.png', 'images/im10.png', 'images/im11.png', 'images/im12.png', 'images/im13.png', 'images/im14.png', 'images/im15.png', 'images/im16.png', 'images/im17.png', 'images/im20.png', 'images/im21.png', 'images/im22.png', 'images/im23.png', 'images/im24.png', 'images/im25.png', 'images/im26.png', 'images/im27.png', 'images/im28.png', 'images/im29.png', 'images/im30.png', 'images/im31.png', 'images/im32.png', 'images/im33.png', 'images/im34.png', 'images/im35.png'];
    imagesLoaded = 0;
    _loaded = false;
    for (i = _i = 0, _len = imageSources.length; _i < _len; i = ++_i) {
      src = imageSources[i];
      images[i] = new Image();
      images[i].src = src;
      images[i].onload = function() {
        imagesLoaded++;
        if (imagesLoaded === imageSources.length) {
          $('#loader_wrapper').fadeTo("normal", 0);
          draw();
          return log("COMPLETE: Image sources");
        }
      };
      total_images = imageSources.length;
    }
    draw = function() {
      updateCanvas(images[0]);
    };
    $('.slider').slider({
      value: 0,
      min: 0,
      max: images.length,
      step: 1,
      animate: true,
      slide: function(event, ui) {
        slideFrame.previous = slideFrame.current;
        slideFrame.current = ui.value;
        updateIndicators(ui.value);
        if (slideFrame.current - slideFrame.previous > 1) {
          imageCycle(slideFrame.current, slideFrame.previous, 1, "increment");
        } else if (slideFrame.current - slideFrame.previous < -1) {
          imageCycle(slideFrame.current, slideFrame.previous, -1, "decrement");
        } else {
          updateCanvas(images[ui.value]);
        }
      },
      stop: function(event, ui) {
        var lineData, _j, _len1;

        slideFrame.swipe_previous = slideFrame.swipe_current;
        slideFrame.swipe_current = ui.value;
        for (_j = 0, _len1 = lineArray.length; _j < _len1; _j++) {
          lineData = lineArray[_j];
          if (ui.value > lineData.frame - 1 && slideFrame.swipe_previous < lineData.frame) {
            breakCounter++;
          } else if (ui.value < lineData.frame && slideFrame.swipe_previous > lineData.frame - 1) {
            breakCounter--;
          }
        }
        updateElements(ui.value);
      },
      start: function(event, ui) {
        return hideElements(ui.value);
      }
    });
  };

  hideElements = function(value) {
    $('#content .active').removeClass('active');
    $('svg.active').attr("class", "hedgehog hedgehog-" + value);
    $('.hedgehog .rvml').hide();
  };

  updateElements = function(value) {
    $('.hedgehog-' + value).addClass('active');
    $('svg.hedgehog-' + value).attr("class", "hedgehog active hedgehog-" + value);
    $('.hedgehog-' + value + " .rvml").show();
    updateIndicators(value);
  };

  updateCanvas = function(ImgObj) {
    if (typeof ImgObj !== 'undefined') {
      context.drawImage(ImgObj, 0, 0, 500, 500);
    }
  };

  drawLines = function(lineArray) {
    var indicator, indicator_loc, indicator_pos, line, lineData, paper, slider_width, _i, _len;

    for (_i = 0, _len = lineArray.length; _i < _len; _i++) {
      lineData = lineArray[_i];
      paper = Raphael($(".lines")[0], 500, 500);
      paper.canvas.style.position = "absolute";
      $(paper.canvas).attr("class", "hedgehog hedgehog-" + lineData.frame);
      line = paper.path(lineData.path);
      slider_width = $('.ui-slider').outerWidth();
      indicator_loc = slider_width / total_images * lineData.frame;
      indicator_pos = indicator_loc - 6;
      indicator = "<span class='indicate indicator-" + lineData.frame + "'></span>";
      $('.ui-slider').append(indicator);
      $('.indicator-' + lineData.frame).css("left", indicator_pos);
    }
    if (Raphael.vml) {
      $('.hedgehog .rvml').hide();
    }
  };

  imageCycle = function(current, previous, loop_img, operator) {
    var current_img, forward_intv, reverse_intv, total_img;

    total_img = current - previous;
    current_img = previous;
    if (operator === "increment") {
      return forward_intv = setInterval(function() {
        current_img++;
        if (loop_img <= total_img) {
          updateCanvas(images[current_img]);
          return loop_img++;
        } else {
          return clearInterval(forward_intv);
        }
      }, 50);
    } else {
      return reverse_intv = setInterval(function() {
        current_img--;
        if (loop_img >= total_img) {
          updateCanvas(images[current_img]);
          return loop_img--;
        } else {
          return clearInterval(reverse_intv);
        }
      }, 50);
    }
  };

  CTA_buttons = function() {
    return $('.hedgehog button').click(function() {
      var tracker_tag;

      tracker_tag = $(this).attr('data-tracking');
      return SwoopGAData.send(["CTA", tracker_tag]);
    });
  };

  updateIndicators = function(ui) {
    var $elem;

    $elem = $('.indicate');
    if ($elem.hasClass('indicator-' + ui)) {
      $elem.removeClass("indicate_selected");
      $('.indicator-' + ui).addClass("indicate_selected");
      return SwoopGAData.send(["click", "breakpoint-" + ui]);
    } else {
      return $elem.removeClass("indicate_selected");
    }
  };

  positionLoader = function() {
    var $loader, content_height, content_width, loader_height, loader_left, loader_top, loader_width;

    $loader = $('#loader_wrapper');
    content_height = $('#content').height();
    content_width = $('#content').width();
    loader_width = $loader.width();
    loader_height = $loader.height();
    loader_top = (content_height - loader_height) / 2;
    $loader.css('top', loader_top);
    loader_left = (content_width - loader_width) / 2;
    return $loader.css('left', loader_left);
  };

  nextBreakpoint = function(lineArray) {
    var cap;

    cap = breakCounter + 1;
    if (cap < lineArray.length) {
      breakCounter++;
      slideFrame.previous = slideFrame.current;
      slideFrame.swipe_previous = slideFrame.swipe_current;
      updateForwardSwipe(lineArray, slideFrame.previous);
    }
    hideElements(slideFrame.previous);
    return updateElements($('.slider').slider("value"));
  };

  previousBreakpoint = function(lineArray) {
    var lineData, _i, _len;

    slideFrame.previous = slideFrame.current;
    slideFrame.swipe_previous = slideFrame.swipe_current;
    hideElements(slideFrame.previous);
    for (_i = 0, _len = lineArray.length; _i < _len; _i++) {
      lineData = lineArray[_i];
      if (breakCounter === -1) {
        slideFrame.current = 0;
        slideFrame.swipe_current = 0;
        imageCycle(0, slideFrame.previous, -1, "decrement");
        $('.slider').slider("value", 0);
      } else if (parseInt(slideFrame.current) === lineData.frame && breakCounter === 0) {
        breakCounter--;
        slideFrame.current = 0;
        slideFrame.swipe_current = 0;
        imageCycle(0, slideFrame.previous, -1, "decrement");
        $('.slider').slider("value", 0);
      } else if (parseInt(slideFrame.swipe_current) === lineData.frame) {
        breakCounter--;
        updateBackwardSwipe(lineArray, slideFrame.previous);
      } else if (breakCounter === lineArray.length - 1) {
        updateBackwardSwipe(lineArray, slideFrame.previous);
      } else {
        updateBackwardSwipe(lineArray, slideFrame.previous);
      }
    }
    if (breakCounter === -1) {
      slideFrame.swipe_current = 0;
    } else {
      slideFrame.swipe_current = lineArray[breakCounter].frame;
    }
    return updateElements(slideFrame.current);
  };

  updateBackwardSwipe = function(lineArray, previous) {
    slideFrame.current = lineArray[breakCounter].frame;
    imageCycle(slideFrame.current, previous, -1, "decrement");
    return $('.slider').slider("value", slideFrame.current);
  };

  updateForwardSwipe = function(lineArray, previous) {
    slideFrame.current = lineArray[breakCounter].frame;
    slideFrame.swipe_current = lineArray[breakCounter].frame;
    imageCycle(slideFrame.current, previous, 1, "increment");
    return $('.slider').slider("value", slideFrame.current);
  };

  between = function(x, min, max) {
    return x >= min && x <= max;
  };

  SwoopAnalyticsData = (function() {
    function SwoopAnalyticsData(enabled) {
      this.enabled = enabled;
      this.send();
    }

    SwoopAnalyticsData.prototype.event = "snap";

    SwoopAnalyticsData.prototype.build = function(breakpoints_array) {
      if (breakpoints_array !== void 0) {
        this.identifier = breakpoints_array[1];
        if (breakpoints_array[0] !== "CTA") {
          this.event = "click";
          this.category = 'swoop-breakpoints';
        } else {
          this.event = "CTA";
          this.category = 'swoop-call-to-action';
        }
      }
      return ['_trackEvent', this.category, this.event, this.identifier];
    };

    SwoopAnalyticsData.prototype.send = function(breakpoints_array) {
      if (this.enabled) {
        log(breakpoints_array);
        _gaq.push(this.build(breakpoints_array));
      }
    };

    return SwoopAnalyticsData;

  })();

  $("#content").bind("mousewheel DOMMouseScroll", function(e) {
    var delta, oe, result, sliderElement, value;

    delta = 0;
    sliderElement = $(this).find('.slider');
    oe = e.originalEvent;
    value = sliderElement.slider('value');
    hideElements(value);
    if (oe.wheelDelta) {
      delta = -oe.wheelDelta;
    }
    if (oe.detail) {
      delta = oe.detail * 40;
    }
    value = delta > 0 ? value + 1 : value - 1;
    result = sliderElement.slider("option", "slide").call(sliderElement, e, {
      value: value
    });
    if (result !== false) {
      sliderElement.slider("value", value);
    }
    updateElements(value);
    return false;
  });

}).call(this);
